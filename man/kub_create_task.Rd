% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task.R
\name{kub_create_task}
\alias{kub_create_task}
\title{Create a docker directory with the kuber template for parallelism by expansion}
\usage{
kub_create_task(path, cluster_name, bucket_name, image_name,
  service_account)
}
\arguments{
\item{path}{Directory where to initialize task (will be set as default for
other Kuber functions)}

\item{cluster_name}{Name of the cluster where to execute jobs (must exist
already)}

\item{bucket_name}{Name of the storage bucket where the files will be stored
(will be created if necessary)}

\item{image_name}{Name of the docker image where to build the container (either
its full path in the form \code{[HOSTNAME]/[PROJECT_ID]/[IMAGE_NAME]:[VERSION]} or
simply \code{[IMAGE_NAME]} for it to be automatically pushed to the Google Cloud
Registry)}

\item{service_account}{Path to the Service Account JSON file that will be
used to authenticate \code{gsutil} inside each container (must be a storage object
administrator)}
}
\value{
Path where the kuber folder was created
}
\description{
This function creates a directory with 5 components from the
kuber template: a \code{Dockerfile} (that is designed for expanded parallel taks),
an R file \code{exec.R} (which contains some code that guides how your program
should work), a \code{job-tmpl.yaml} (a template for the yaml files that will lauch
the docker jobs), an RDS \code{list.rds} (which contains \code{as.list(seq(1, 10))} just
so you don't forget to setup the inputs that each job will take) and a \code{jobs/}
folder (where the actual job yaml files will go once you run \code{\link[=kub_push_task]{kub_push_task()}}).
For more information, please see the sections below.
}
\section{Dockerfile}{

This is a very simple \code{Dockerfile} based on \code{rocker/tidyverse} that installs
\code{tidyverse}, \code{devtools} and \code{abjutils}, and copies \code{exec.R} and \code{list.rds} to
the home directory. If you have any extra dependencies or want to use more
files for your script, this is where you should add them.
}

\section{Exec.R}{

The \code{exec.R} file is only a guide for what your script should probably be
doing. It gets the number of the current job as its only argument, saves a
result file as an RDS and uploads that file to the desired bucket. For more
information, see the "Toy example" vignette; if you're having problems, see
the "Debugging exec.R" vignette.
}

\section{Job-tmpl.yaml}{

The job template is a very simple file that describes how the job should be
run once it is activated by the pod, which is essentially running
\code{Rscript --vanilla exec.R [JOB_NUMBER]}. Since this template uses parallelism
via expansion, \code{\link[=kub_push_task]{kub_push_task()}} will expand this template into as many job
files as you want.
}

\section{Jobs/}{

This is simply a folder that will store the job files once the template is
expanded.
}

\section{List.rds}{

This is more of a suggestion than a required file. It contains (by default)
a \code{list()} with each integer from 1 to 10, but actually it could be any list
of your choosing. The goal here is to be able to get the arguments for your
script just by extracting the element with index equal to the job number
(meaning that job number \code{N} might read and use everything stored in \code{list.rds}
at index \code{[[N]]}). To illustrate this concept, take for example a webscraping
script: \code{list.rds} would contain a list where each element is a character
vector of URLs to scrape; each job would therefore read the file but only
scrape \code{list[[N]]} so that it doesn't overlap with any other job. Fore more
information, see the "Toy example" vignette.
}

\section{Service account}{

In order to create a service account (necessary to manage storage resources
remotely) you must access \url{https://console.cloud.google.com/iam-admin/serviceaccounts}
and add to it the "storage object administrator" role. You should then click
on the account and generate a key as a JSON file. This file will be downloaded
to your computer and can be referenced via the \code{service_account} argument.
}

\references{
\url{https://kubernetes.io/docs/tasks/job/parallel-processing-expansion/}
\url{https://cloud.google.com/container-registry/docs/quickstart}
}
